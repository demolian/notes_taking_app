{"ast":null,"code":"var _jsxFileName = \"V:\\\\Notes_taking_web_app\\\\NotesTakingApp\\\\notes-taking-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Import CSS\nimport { supabase } from './supabase/supabaseClient';\nimport imageCompression from 'browser-image-compression';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [image, setImage] = useState(null);\n  const [editingId, setEditingId] = useState(null);\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  // Fetch notes from Supabase\n  async function fetchNotes() {\n    const {\n      data,\n      error\n    } = await supabase.from('notes').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      alert('Error: ' + error.message); // Use alert for web\n    } else if (data) {\n      setNotes(data);\n    }\n  }\n\n  // Upload an image to Supabase Storage and return its public URL\n  async function uploadImage(file) {\n    try {\n      // Compress the image\n      const options = {\n        maxSizeMB: 1,\n        maxWidthOrHeight: 800,\n        useWebWorker: true\n      };\n      const compressedFile = await imageCompression(file, options);\n      const formData = new FormData();\n      formData.append('file', compressedFile);\n      const fileName = `${Date.now()}.jpg`;\n      const {\n        data,\n        error\n      } = await supabase.storage.from('notes-images').upload(fileName, formData, {\n        cacheControl: '3600',\n        upsert: false\n      });\n      if (error) {\n        console.error('Supabase upload error:', error);\n        throw error;\n      }\n\n      // Get public URL\n      const result = supabase.storage.from('notes-images').getPublicUrl(data.path);\n      if (!result.data.publicUrl) {\n        throw new Error('Error getting public URL');\n      }\n      const publicUrl = result.data.publicUrl;\n      return publicUrl;\n    } catch (err) {\n      console.error('Image upload error:', err);\n      alert('Upload Error: ' + (err.message || 'Image upload failed'));\n      return null;\n    }\n  }\n\n  // Pick an image using the device's image library\n  async function pickImage() {\n    if (Platform.OS === 'web') {\n      // Web implementation using a file input\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*'; // Limit to image files\n\n      input.onchange = async event => {\n        const file = event.target.files[0];\n        if (file) {\n          const reader = new FileReader();\n          reader.onload = readerEvent => {\n            const base64Image = readerEvent.target.result;\n            setImage(base64Image); // Set the base64 image data\n          };\n          reader.readAsDataURL(file);\n        }\n      };\n      input.click(); // Programmatically trigger the file input\n    }\n  }\n\n  // Create or update a note\n  async function saveNote() {\n    let imageUrl = null;\n    let oldImageUrl = null; // Store the old image URL\n\n    // If editing, get the existing note's image URL\n    if (editingId) {\n      const {\n        data: existingNote,\n        error: existingNoteError\n      } = await supabase.from('notes').select('image_url').eq('id', editingId).single();\n      if (existingNoteError) {\n        alert('Error getting existing note: ' + existingNoteError.message); // Use alert for web\n        return;\n      }\n      oldImageUrl = existingNote === null || existingNote === void 0 ? void 0 : existingNote.image_url;\n    }\n    if (image) {\n      const uploadedUrl = await uploadImage(image);\n      if (uploadedUrl) {\n        imageUrl = uploadedUrl;\n      } else {\n        alert('Error: Failed to upload image.'); // Use alert for web\n        return;\n      }\n    }\n    const timestamp = new Date().toISOString();\n    if (editingId) {\n      const {\n        error\n      } = await supabase.from('notes').update({\n        title,\n        content,\n        image_url: imageUrl,\n        updated_at: timestamp\n      }).eq('id', editingId);\n      if (error) alert('Error updating note: ' + error.message); // Use alert for web\n      else {\n        alert('Note updated'); // Use alert for web\n      }\n\n      // Delete the old image if it was replaced\n      if (oldImageUrl && imageUrl !== oldImageUrl) {\n        const oldImagePath = oldImageUrl.split('/').pop();\n        if (oldImagePath) {\n          const {\n            error: storageError\n          } = await supabase.storage.from('notes-images').remove([oldImagePath]);\n          if (storageError) {\n            console.error('Error deleting old image from storage', storageError.message);\n            alert('Note updated, but error deleting old image: ' + storageError.message); // Use alert for web\n          } else {\n            console.log('Old image deleted from storage');\n          }\n        }\n      }\n    } else {\n      const {\n        error\n      } = await supabase.from('notes').insert([{\n        title,\n        content,\n        image_url: imageUrl,\n        created_at: timestamp,\n        updated_at: timestamp\n      }]);\n      if (error) alert('Error creating note: ' + error.message); // Use alert for web\n      else {\n        alert('Note created'); // Use alert for web\n      }\n    }\n    // Reset form and refresh\n    setTitle('');\n    setContent('');\n    setImage(null);\n    setEditingId(null);\n    fetchNotes();\n  }\n\n  // Delete a note\n  async function deleteNote(id) {\n    // Get the note to retrieve the image URL\n    const {\n      data: noteData,\n      error: noteError\n    } = await supabase.from('notes').select('image_url').eq('id', id).single();\n    if (noteError) {\n      alert('Error getting note: ' + noteError.message); // Use alert for web\n      return;\n    }\n    const imageUrl = noteData === null || noteData === void 0 ? void 0 : noteData.image_url;\n\n    // Delete the note\n    const {\n      error\n    } = await supabase.from('notes').delete().eq('id', id);\n    if (error) {\n      alert('Error deleting note: ' + error.message); // Use alert for web\n      return;\n    }\n\n    // Delete the image from storage if it exists\n    if (imageUrl) {\n      const imagePath = imageUrl.split('/').pop(); // Extract file name from URL\n      if (imagePath) {\n        const {\n          error: storageError\n        } = await supabase.storage.from('notes-images').remove([imagePath]);\n        if (storageError) {\n          console.error('Error deleting image from storage', storageError.message);\n          alert('Note deleted, but error deleting image: ' + storageError.message); // Use alert for web\n        } else {\n          console.log('Image deleted from storage');\n          alert('Note and image deleted'); // Use alert for web\n        }\n      }\n    } else {\n      alert('Note deleted'); // Use alert for web\n    }\n    fetchNotes();\n  }\n\n  // Start editing a note\n  function startEdit(note) {\n    setTitle(note.title);\n    setContent(note.content);\n    setImage(note.image_url);\n    setEditingId(note.id);\n  }\n  const renderItem = item => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"noteCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"noteTitle\",\n      children: item.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), item.image_url ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: item.image_url,\n      alt: \"Note Image\",\n      className: \"noteImage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noteActions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => startEdit(item),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteNote(item.id),\n        style: {\n          color: 'red'\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"NotesApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input multiline\",\n        placeholder: \"Content\",\n        value: content,\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: pickImage,\n          children: \"Pick Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: \"Preview\",\n          className: \"previewImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveNote,\n        children: editingId ? 'Update Note' : 'Add Note'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notesList\",\n      children: notes.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderItem(item)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YYtHuB7Vyx1IpMetdzyQSa5ZIdM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","supabase","imageCompression","jsxDEV","_jsxDEV","App","_s","notes","setNotes","title","setTitle","content","setContent","image","setImage","editingId","setEditingId","fetchNotes","data","error","from","select","order","ascending","alert","message","uploadImage","file","options","maxSizeMB","maxWidthOrHeight","useWebWorker","compressedFile","formData","FormData","append","fileName","Date","now","storage","upload","cacheControl","upsert","console","result","getPublicUrl","path","publicUrl","Error","err","pickImage","Platform","OS","input","document","createElement","type","accept","onchange","event","target","files","reader","FileReader","onload","readerEvent","base64Image","readAsDataURL","click","saveNote","imageUrl","oldImageUrl","existingNote","existingNoteError","eq","single","image_url","uploadedUrl","timestamp","toISOString","update","updated_at","oldImagePath","split","pop","storageError","remove","log","insert","created_at","deleteNote","id","noteData","noteError","delete","imagePath","startEdit","note","renderItem","item","className","children","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","style","color","placeholder","value","onChange","e","map","_c","$RefreshReg$"],"sources":["V:/Notes_taking_web_app/NotesTakingApp/notes-taking-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css'; // Import CSS\r\nimport { supabase } from './supabase/supabaseClient'; \r\nimport imageCompression from 'browser-image-compression';\r\n\r\nexport default function App() {\r\n  const [notes, setNotes] = useState([]);\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [image, setImage] = useState(null);\r\n  const [editingId, setEditingId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  // Fetch notes from Supabase\r\n  async function fetchNotes() {\r\n    const { data, error } = await supabase\r\n      .from('notes')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    if (error) {\r\n      alert('Error: ' + error.message); // Use alert for web\r\n    } else if (data) {\r\n      setNotes(data);\r\n    }\r\n  }\r\n\r\n  // Upload an image to Supabase Storage and return its public URL\r\n  async function uploadImage(file) {\r\n    try {\r\n      // Compress the image\r\n      const options = {\r\n        maxSizeMB: 1,\r\n        maxWidthOrHeight: 800,\r\n        useWebWorker: true,\r\n      };\r\n      const compressedFile = await imageCompression(file, options);\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', compressedFile);\r\n\r\n      const fileName = `${Date.now()}.jpg`;\r\n\r\n      const { data, error } = await supabase.storage\r\n        .from('notes-images')\r\n        .upload(fileName, formData, { cacheControl: '3600', upsert: false });\r\n\r\n      if (error) {\r\n        console.error('Supabase upload error:', error);\r\n        throw error;\r\n      }\r\n\r\n      // Get public URL\r\n      const result = supabase.storage\r\n        .from('notes-images')\r\n        .getPublicUrl(data.path);\r\n      if (!result.data.publicUrl) {\r\n        throw new Error('Error getting public URL');\r\n      }\r\n      const publicUrl = result.data.publicUrl;\r\n      return publicUrl;\r\n    } catch (err) {\r\n      console.error('Image upload error:', err);\r\n      alert('Upload Error: ' + (err.message || 'Image upload failed'));\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Pick an image using the device's image library\r\n  async function pickImage() {\r\n    if (Platform.OS === 'web') {\r\n      // Web implementation using a file input\r\n      const input = document.createElement('input');\r\n      input.type = 'file';\r\n      input.accept = 'image/*'; // Limit to image files\r\n\r\n      input.onchange = async (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n          const reader = new FileReader();\r\n          reader.onload = (readerEvent) => {\r\n            const base64Image = readerEvent.target.result;\r\n            setImage(base64Image); // Set the base64 image data\r\n          };\r\n          reader.readAsDataURL(file);\r\n        }\r\n      };\r\n\r\n      input.click(); // Programmatically trigger the file input\r\n    }\r\n  }\r\n\r\n  // Create or update a note\r\n  async function saveNote() {\r\n    let imageUrl = null;\r\n    let oldImageUrl = null; // Store the old image URL\r\n\r\n    // If editing, get the existing note's image URL\r\n    if (editingId) {\r\n      const { data: existingNote, error: existingNoteError } = await supabase\r\n        .from('notes')\r\n        .select('image_url')\r\n        .eq('id', editingId)\r\n        .single();\r\n\r\n      if (existingNoteError) {\r\n        alert('Error getting existing note: ' + existingNoteError.message); // Use alert for web\r\n        return;\r\n      }\r\n      oldImageUrl = existingNote?.image_url;\r\n    }\r\n\r\n    if (image) {\r\n      const uploadedUrl = await uploadImage(image);\r\n      if (uploadedUrl) {\r\n        imageUrl = uploadedUrl;\r\n      } else {\r\n        alert('Error: Failed to upload image.'); // Use alert for web\r\n        return;\r\n      }\r\n    }\r\n\r\n    const timestamp = new Date().toISOString();\r\n    if (editingId) {\r\n      const { error } = await supabase\r\n        .from('notes')\r\n        .update({\r\n          title,\r\n          content,\r\n          image_url: imageUrl,\r\n          updated_at: timestamp,\r\n        })\r\n        .eq('id', editingId);\r\n\r\n      if (error) alert('Error updating note: ' + error.message); // Use alert for web\r\n      else {\r\n        alert('Note updated'); // Use alert for web\r\n      }\r\n\r\n      // Delete the old image if it was replaced\r\n      if (oldImageUrl && imageUrl !== oldImageUrl) {\r\n        const oldImagePath = oldImageUrl.split('/').pop();\r\n        if (oldImagePath) {\r\n          const { error: storageError } = await supabase.storage\r\n            .from('notes-images')\r\n            .remove([oldImagePath]);\r\n\r\n          if (storageError) {\r\n            console.error(\r\n              'Error deleting old image from storage',\r\n              storageError.message\r\n            );\r\n            alert(\r\n              'Note updated, but error deleting old image: ' +\r\n                storageError.message\r\n            ); // Use alert for web\r\n          } else {\r\n            console.log('Old image deleted from storage');\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const { error } = await supabase\r\n        .from('notes')\r\n        .insert([\r\n          {\r\n            title,\r\n            content,\r\n            image_url: imageUrl,\r\n            created_at: timestamp,\r\n            updated_at: timestamp,\r\n          },\r\n        ]);\r\n      if (error) alert('Error creating note: ' + error.message); // Use alert for web\r\n      else {\r\n        alert('Note created'); // Use alert for web\r\n      }\r\n    }\r\n    // Reset form and refresh\r\n    setTitle('');\r\n    setContent('');\r\n    setImage(null);\r\n    setEditingId(null);\r\n    fetchNotes();\r\n  }\r\n\r\n  // Delete a note\r\n  async function deleteNote(id) {\r\n    // Get the note to retrieve the image URL\r\n    const { data: noteData, error: noteError } = await supabase\r\n      .from('notes')\r\n      .select('image_url')\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (noteError) {\r\n      alert('Error getting note: ' + noteError.message); // Use alert for web\r\n      return;\r\n    }\r\n\r\n    const imageUrl = noteData?.image_url;\r\n\r\n    // Delete the note\r\n    const { error } = await supabase\r\n      .from('notes')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      alert('Error deleting note: ' + error.message); // Use alert for web\r\n      return;\r\n    }\r\n\r\n    // Delete the image from storage if it exists\r\n    if (imageUrl) {\r\n      const imagePath = imageUrl.split('/').pop(); // Extract file name from URL\r\n      if (imagePath) {\r\n        const { error: storageError } = await supabase.storage\r\n          .from('notes-images')\r\n          .remove([imagePath]);\r\n\r\n        if (storageError) {\r\n          console.error('Error deleting image from storage', storageError.message);\r\n          alert(\r\n            'Note deleted, but error deleting image: ' + storageError.message\r\n          ); // Use alert for web\r\n        } else {\r\n          console.log('Image deleted from storage');\r\n          alert('Note and image deleted'); // Use alert for web\r\n        }\r\n      }\r\n    } else {\r\n      alert('Note deleted'); // Use alert for web\r\n    }\r\n\r\n    fetchNotes();\r\n  }\r\n\r\n  // Start editing a note\r\n  function startEdit(note) {\r\n    setTitle(note.title);\r\n    setContent(note.content);\r\n    setImage(note.image_url);\r\n    setEditingId(note.id);\r\n  }\r\n\r\n  const renderItem = (item) => (\r\n    <div className=\"noteCard\">\r\n      <h3 className=\"noteTitle\">{item.title}</h3>\r\n      <p>{item.content}</p>\r\n      {item.image_url ? (\r\n        <img src={item.image_url} alt=\"Note Image\" className=\"noteImage\" />\r\n      ) : null}\r\n      <div className=\"noteActions\">\r\n        <button onClick={() => startEdit(item)}>Edit</button>\r\n        <button onClick={() => deleteNote(item.id)} style={{ color: 'red' }}>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"header\">NotesApp</h1>\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <textarea\r\n          className=\"input multiline\"\r\n          placeholder=\"Content\"\r\n          value={content}\r\n          onChange={(e) => setContent(e.target.value)}\r\n        />\r\n        <div className=\"buttonRow\">\r\n          <button onClick={pickImage}>Pick Image</button>\r\n          {image && (\r\n            <img src={image} alt=\"Preview\" className=\"previewImage\" />\r\n          )}\r\n        </div>\r\n        <button onClick={saveNote}>\r\n          {editingId ? 'Update Note' : 'Add Note'}\r\n        </button>\r\n      </div>\r\n      <div className=\"notesList\">\r\n        {notes.map((item) => (\r\n          <div key={item.id}>{renderItem(item)}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}